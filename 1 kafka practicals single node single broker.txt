lenovo@lenovo-Lenovo-G450:~$ cd Desktop
lenovo@lenovo-Lenovo-G450:~/Desktop$ cd kafka
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ ls
bin  config  libs  LICENSE  NOTICE  site-docs

lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ ls config/
connect-console-sink.properties    connect-file-sink.properties    connect-standalone.properties  producer.properties     zookeeper.properties
connect-console-source.properties  connect-file-source.properties  consumer.properties            server.properties
connect-distributed.properties     connect-log4j.properties        log4j.properties               tools-log4j.properties


lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ gedit config/zookeeper.properties
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ cat config/zookeeper.properties


# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# the directory where the snapshot is stored.
dataDir=/tmp/zookeeper
# the port at which the clients will connect
clientPort=2182
# disable the per-ip limit on the number of connections since this is a non-production config
maxClientCnxns=0

--------------------------------------------------------------------------------------------------------------------------------------
step 1: start zookeeper (in one terminal)
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/zookeeper-server-start.sh config/zookeeper.properties

	at org.apache.zookeeper.server.NIOServerCnxnFactory.run(NIOServerCnxnFactory.java:203)
	we see this

-------------------------------------------------------------------------------------------------------------------------------------
step 2: start broker(server) in one terminal

lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ jps
2657 SecondaryNameNode
3841 Jps
2998 NodeManager
2870 ResourceManager
2494 DataNode
3582 QuorumPeerMain
2367 NameNode

before starting broker(server), first check server.properties files

In server.properties file, we need to check or configure 4 things
1)broker1d=0, if only one broker, 
  brokerid=1, if we have second broker
  brokerid=2, if we have third broker
2)broker portno=9092 
  if multiple brokers then specify 9092,9093,9094.....
3)log.dirs=/tmp/kafka-logs
  for 2nd broker,we need to change the log dir
4)Zookeeper portno=2181 or any other port that was specified in zookeeper.properties

lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ gedit config/server.properties
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ cat config/server.properties

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=0

# Switch to enable topic deletion or not, default value is false
#delete.topic.enable=true

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads handling network requests
num.network.threads=3

# The number of threads doing disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs=/tmp/kafka-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=localhost:2181

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000

----------------------------------------------------------------------------------------------------------------------------------------

Starting the broker:

lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-server-start.sh config/server.properties

[2017-09-14 15:16:23,172] INFO KafkaConfig values: 
	advertised.host.name = null
	advertised.listeners = null
	advertised.port = null
	authorizer.class.name = 
	auto.create.topics.enable = true
	auto.leader.rebalance.enable = true
	background.threads = 10
	broker.id = 0
	broker.id.generation.enable = true
	broker.rack = null
	compression.type = producer
	connections.max.idle.ms = 600000
	controlled.shutdown.enable = true
	controlled.shutdown.max.retries = 3
	controlled.shutdown.retry.backoff.ms = 5000
	controller.socket.timeout.ms = 30000
	create.topic.policy.class.name = null
	default.replication.factor = 1
	delete.topic.enable = false
	fetch.purgatory.purge.interval.requests = 1000
	group.max.session.timeout.ms = 300000
	group.min.session.timeout.ms = 6000
	host.name = 
	inter.broker.listener.name = null
	inter.broker.protocol.version = 0.10.2-IV0
	leader.imbalance.check.interval.seconds = 300
	leader.imbalance.per.broker.percentage = 10
	listener.security.protocol.map = SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,TRACE:TRACE,SASL_SSL:SASL_SSL,PLAINTEXT:PLAINTEXT
	listeners = null
	log.cleaner.backoff.ms = 15000
	log.cleaner.dedupe.buffer.size = 134217728
	log.cleaner.delete.retention.ms = 86400000
	log.cleaner.enable = true
	log.cleaner.io.buffer.load.factor = 0.9
	log.cleaner.io.buffer.size = 524288
	log.cleaner.io.max.bytes.per.second = 1.7976931348623157E308
	log.cleaner.min.cleanable.ratio = 0.5
	log.cleaner.min.compaction.lag.ms = 0
	log.cleaner.threads = 1
	log.cleanup.policy = [delete]
	log.dir = /tmp/kafka-logs
	log.dirs = /tmp/kafka-logs
	log.flush.interval.messages = 9223372036854775807
	log.flush.interval.ms = null
	log.flush.offset.checkpoint.interval.ms = 60000
	log.flush.scheduler.interval.ms = 9223372036854775807
	log.index.interval.bytes = 4096
	log.index.size.max.bytes = 10485760
	log.message.format.version = 0.10.2-IV0
	log.message.timestamp.difference.max.ms = 9223372036854775807
	log.message.timestamp.type = CreateTime
	log.preallocate = false
	log.retention.bytes = -1
	log.retention.check.interval.ms = 300000
	log.retention.hours = 168
	log.retention.minutes = null
	log.retention.ms = null
	log.roll.hours = 168
	log.roll.jitter.hours = 0
	log.roll.jitter.ms = null
	log.roll.ms = null
	log.segment.bytes = 1073741824
	log.segment.delete.delay.ms = 60000
	max.connections.per.ip = 2147483647
	max.connections.per.ip.overrides = 
	message.max.bytes = 1000012
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	min.insync.replicas = 1
	num.io.threads = 8
	num.network.threads = 3
	num.partitions = 1
	num.recovery.threads.per.data.dir = 1
	num.replica.fetchers = 1
	offset.metadata.max.bytes = 4096
	offsets.commit.required.acks = -1
	offsets.commit.timeout.ms = 5000
	offsets.load.buffer.size = 5242880
	offsets.retention.check.interval.ms = 600000
	offsets.retention.minutes = 1440
	offsets.topic.compression.codec = 0
	offsets.topic.num.partitions = 50
	offsets.topic.replication.factor = 3
	offsets.topic.segment.bytes = 104857600
	port = 9092
	principal.builder.class = class org.apache.kafka.common.security.auth.DefaultPrincipalBuilder
	producer.purgatory.purge.interval.requests = 1000
	queued.max.requests = 500
	quota.consumer.default = 9223372036854775807
	quota.producer.default = 9223372036854775807
	quota.window.num = 11
	quota.window.size.seconds = 1
	replica.fetch.backoff.ms = 1000
	replica.fetch.max.bytes = 1048576
	replica.fetch.min.bytes = 1
	replica.fetch.response.max.bytes = 10485760
	replica.fetch.wait.max.ms = 500
	replica.high.watermark.checkpoint.interval.ms = 5000
	replica.lag.time.max.ms = 10000
	replica.socket.receive.buffer.bytes = 65536
	replica.socket.timeout.ms = 30000
	replication.quota.window.num = 11
	replication.quota.window.size.seconds = 1
	request.timeout.ms = 30000
	reserved.broker.max.id = 1000
	sasl.enabled.mechanisms = [GSSAPI]
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.principal.to.local.rules = [DEFAULT]
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.mechanism.inter.broker.protocol = GSSAPI
	security.inter.broker.protocol = PLAINTEXT
	socket.receive.buffer.bytes = 102400
	socket.request.max.bytes = 104857600
	socket.send.buffer.bytes = 102400
	ssl.cipher.suites = null
	ssl.client.auth = none
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	unclean.leader.election.enable = true
	zookeeper.connect = localhost:2181
	zookeeper.connection.timeout.ms = 6000
	zookeeper.session.timeout.ms = 6000
	zookeeper.set.acl = false
	zookeeper.sync.time.ms = 2000
 (kafka.server.KafkaConfig)
[2017-09-14 15:16:23,299] INFO starting (kafka.server.KafkaServer)
[2017-09-14 15:16:23,361] INFO Connecting to zookeeper on localhost:2181 (kafka.server.KafkaServer)
[2017-09-14 15:16:23,419] INFO Starting ZkClient event thread. (org.I0Itec.zkclient.ZkEventThread)
[2017-09-14 15:16:23,428] INFO Client environment:zookeeper.version=3.4.9-1757313, built on 08/23/2016 06:50 GMT (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,428] INFO Client environment:host.name=localhost (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,428] INFO Client environment:java.version=1.8.0_144 (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,428] INFO Client environment:java.vendor=Oracle Corporation (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,428] INFO Client environment:java.home=/usr/lib/jvm/java-8-oracle/jre (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,428] INFO Client environment:java.class.path=:/home/lenovo/Desktop/kafka/bin/../libs/aopalliance-repackaged-2.5.0-b05.jar:/home/lenovo/Desktop/kafka/bin/../libs/argparse4j-0.7.0.jar:/home/lenovo/Desktop/kafka/bin/../libs/connect-api-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/connect-file-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/connect-json-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/connect-runtime-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/connect-transforms-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/guava-18.0.jar:/home/lenovo/Desktop/kafka/bin/../libs/hk2-api-2.5.0-b05.jar:/home/lenovo/Desktop/kafka/bin/../libs/hk2-locator-2.5.0-b05.jar:/home/lenovo/Desktop/kafka/bin/../libs/hk2-utils-2.5.0-b05.jar:/home/lenovo/Desktop/kafka/bin/../libs/jackson-annotations-2.8.0.jar:/home/lenovo/Desktop/kafka/bin/../libs/jackson-annotations-2.8.5.jar:/home/lenovo/Desktop/kafka/bin/../libs/jackson-core-2.8.5.jar:/home/lenovo/Desktop/kafka/bin/../libs/jackson-databind-2.8.5.jar:/home/lenovo/Desktop/kafka/bin/../libs/jackson-jaxrs-base-2.8.5.jar:/home/lenovo/Desktop/kafka/bin/../libs/jackson-jaxrs-json-provider-2.8.5.jar:/home/lenovo/Desktop/kafka/bin/../libs/jackson-module-jaxb-annotations-2.8.5.jar:/home/lenovo/Desktop/kafka/bin/../libs/javassist-3.20.0-GA.jar:/home/lenovo/Desktop/kafka/bin/../libs/javax.annotation-api-1.2.jar:/home/lenovo/Desktop/kafka/bin/../libs/javax.inject-1.jar:/home/lenovo/Desktop/kafka/bin/../libs/javax.inject-2.5.0-b05.jar:/home/lenovo/Desktop/kafka/bin/../libs/javax.servlet-api-3.1.0.jar:/home/lenovo/Desktop/kafka/bin/../libs/javax.ws.rs-api-2.0.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/jersey-client-2.24.jar:/home/lenovo/Desktop/kafka/bin/../libs/jersey-common-2.24.jar:/home/lenovo/Desktop/kafka/bin/../libs/jersey-container-servlet-2.24.jar:/home/lenovo/Desktop/kafka/bin/../libs/jersey-container-servlet-core-2.24.jar:/home/lenovo/Desktop/kafka/bin/../libs/jersey-guava-2.24.jar:/home/lenovo/Desktop/kafka/bin/../libs/jersey-media-jaxb-2.24.jar:/home/lenovo/Desktop/kafka/bin/../libs/jersey-server-2.24.jar:/home/lenovo/Desktop/kafka/bin/../libs/jetty-continuation-9.2.15.v20160210.jar:/home/lenovo/Desktop/kafka/bin/../libs/jetty-http-9.2.15.v20160210.jar:/home/lenovo/Desktop/kafka/bin/../libs/jetty-io-9.2.15.v20160210.jar:/home/lenovo/Desktop/kafka/bin/../libs/jetty-security-9.2.15.v20160210.jar:/home/lenovo/Desktop/kafka/bin/../libs/jetty-server-9.2.15.v20160210.jar:/home/lenovo/Desktop/kafka/bin/../libs/jetty-servlet-9.2.15.v20160210.jar:/home/lenovo/Desktop/kafka/bin/../libs/jetty-servlets-9.2.15.v20160210.jar:/home/lenovo/Desktop/kafka/bin/../libs/jetty-util-9.2.15.v20160210.jar:/home/lenovo/Desktop/kafka/bin/../libs/jopt-simple-5.0.3.jar:/home/lenovo/Desktop/kafka/bin/../libs/kafka_2.10-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/kafka_2.10-0.10.2.1-sources.jar:/home/lenovo/Desktop/kafka/bin/../libs/kafka_2.10-0.10.2.1-test-sources.jar:/home/lenovo/Desktop/kafka/bin/../libs/kafka-clients-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/kafka-log4j-appender-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/kafka-streams-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/kafka-streams-examples-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/kafka-tools-0.10.2.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/log4j-1.2.17.jar:/home/lenovo/Desktop/kafka/bin/../libs/lz4-1.3.0.jar:/home/lenovo/Desktop/kafka/bin/../libs/metrics-core-2.2.0.jar:/home/lenovo/Desktop/kafka/bin/../libs/osgi-resource-locator-1.0.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/reflections-0.9.10.jar:/home/lenovo/Desktop/kafka/bin/../libs/rocksdbjni-5.0.1.jar:/home/lenovo/Desktop/kafka/bin/../libs/scala-library-2.10.6.jar:/home/lenovo/Desktop/kafka/bin/../libs/slf4j-api-1.7.21.jar:/home/lenovo/Desktop/kafka/bin/../libs/slf4j-log4j12-1.7.21.jar:/home/lenovo/Desktop/kafka/bin/../libs/snappy-java-1.1.2.6.jar:/home/lenovo/Desktop/kafka/bin/../libs/validation-api-1.1.0.Final.jar:/home/lenovo/Desktop/kafka/bin/../libs/zkclient-0.10.jar:/home/lenovo/Desktop/kafka/bin/../libs/zookeeper-3.4.9.jar (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,429] INFO Client environment:java.library.path=/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,429] INFO Client environment:java.io.tmpdir=/tmp (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,429] INFO Client environment:java.compiler=<NA> (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,429] INFO Client environment:os.name=Linux (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,429] INFO Client environment:os.arch=amd64 (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,429] INFO Client environment:os.version=3.19.0-84-generic (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,429] INFO Client environment:user.name=lenovo (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,429] INFO Client environment:user.home=/home/lenovo (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,430] INFO Client environment:user.dir=/home/lenovo/Desktop/kafka (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,432] INFO Initiating client connection, connectString=localhost:2181 sessionTimeout=6000 watcher=org.I0Itec.zkclient.ZkClient@1a451d4d (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:16:23,475] INFO Waiting for keeper state SyncConnected (org.I0Itec.zkclient.ZkClient)
[2017-09-14 15:16:23,525] INFO Opening socket connection to server localhost/127.0.0.1:2181. Will not attempt to authenticate using SASL (unknown error) (org.apache.zookeeper.ClientCnxn)
[2017-09-14 15:16:23,561] INFO Socket connection established to localhost/127.0.0.1:2181, initiating session (org.apache.zookeeper.ClientCnxn)
[2017-09-14 15:16:23,680] INFO Session establishment complete on server localhost/127.0.0.1:2181, sessionid = 0x15e7fb9002b0000, negotiated timeout = 6000 (org.apache.zookeeper.ClientCnxn)
[2017-09-14 15:16:23,685] INFO zookeeper state changed (SyncConnected) (org.I0Itec.zkclient.ZkClient)
[2017-09-14 15:16:24,080] INFO Cluster ID = 8xSsuSnwQZmOJLli7kTGBg (kafka.server.KafkaServer)
[2017-09-14 15:16:24,103] WARN No meta.properties file under dir /tmp/kafka-logs/meta.properties (kafka.server.BrokerMetadataCheckpoint)
[2017-09-14 15:16:24,167] INFO [ThrottledRequestReaper-Fetch], Starting  (kafka.server.ClientQuotaManager$ThrottledRequestReaper)
[2017-09-14 15:16:24,170] INFO [ThrottledRequestReaper-Produce], Starting  (kafka.server.ClientQuotaManager$ThrottledRequestReaper)
[2017-09-14 15:16:24,274] INFO Log directory '/tmp/kafka-logs' not found, creating it. (kafka.log.LogManager)
[2017-09-14 15:16:24,304] INFO Loading logs. (kafka.log.LogManager)
[2017-09-14 15:16:24,320] INFO Logs loading complete in 15 ms. (kafka.log.LogManager)
[2017-09-14 15:16:24,512] INFO Starting log cleanup with a period of 300000 ms. (kafka.log.LogManager)
[2017-09-14 15:16:24,516] INFO Starting log flusher with a default period of 9223372036854775807 ms. (kafka.log.LogManager)
[2017-09-14 15:16:24,651] INFO Awaiting socket connections on 0.0.0.0:9092. (kafka.network.Acceptor)
[2017-09-14 15:16:24,659] INFO [Socket Server on Broker 0], Started 1 acceptor threads (kafka.network.SocketServer)
[2017-09-14 15:16:24,712] INFO [ExpirationReaper-0], Starting  (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:16:24,725] INFO [ExpirationReaper-0], Starting  (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:16:24,801] INFO Creating /controller (is it secure? false) (kafka.utils.ZKCheckedEphemeral)
[2017-09-14 15:16:24,829] INFO Result of znode creation is: OK (kafka.utils.ZKCheckedEphemeral)
[2017-09-14 15:16:24,833] INFO 0 successfully elected as leader (kafka.server.ZookeeperLeaderElector)
[2017-09-14 15:16:25,089] INFO [ExpirationReaper-0], Starting  (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:16:25,101] INFO [ExpirationReaper-0], Starting  (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:16:25,109] INFO [ExpirationReaper-0], Starting  (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:16:25,138] INFO [GroupCoordinator 0]: Starting up. (kafka.coordinator.GroupCoordinator)
[2017-09-14 15:16:25,148] INFO [GroupCoordinator 0]: Startup complete. (kafka.coordinator.GroupCoordinator)
[2017-09-14 15:16:25,169] INFO [Group Metadata Manager on Broker 0]: Removed 0 expired offsets in 8 milliseconds. (kafka.coordinator.GroupMetadataManager)
[2017-09-14 15:16:25,254] INFO Will not load MX4J, mx4j-tools.jar is not in the classpath (kafka.utils.Mx4jLoader$)
[2017-09-14 15:16:25,378] INFO Creating /brokers/ids/0 (is it secure? false) (kafka.utils.ZKCheckedEphemeral)
[2017-09-14 15:16:25,448] INFO Result of znode creation is: OK (kafka.utils.ZKCheckedEphemeral)
[2017-09-14 15:16:25,450] INFO New leader is 0 (kafka.server.ZookeeperLeaderElector$LeaderChangeListener)
[2017-09-14 15:16:25,451] INFO Registered broker 0 at path /brokers/ids/0 with addresses: EndPoint(localhost,9092,ListenerName(PLAINTEXT),PLAINTEXT) (kafka.utils.ZkUtils)
[2017-09-14 15:16:25,454] WARN No meta.properties file under dir /tmp/kafka-logs/meta.properties (kafka.server.BrokerMetadataCheckpoint)
[2017-09-14 15:16:25,581] INFO Kafka version : 0.10.2.1 (org.apache.kafka.common.utils.AppInfoParser)
[2017-09-14 15:16:25,584] INFO Kafka commitId : e89bffd6b2eff799 (org.apache.kafka.common.utils.AppInfoParser)
[2017-09-14 15:16:25,590] INFO [Kafka Server 0], started (kafka.server.KafkaServer)
[2017-09-14 15:22:28,700] INFO [ReplicaFetcherManager on broker 0] Removed fetcher for partitions mytopic-0 (kafka.server.ReplicaFetcherManager)
[2017-09-14 15:22:28,795] INFO Completed load of log mytopic-0 with 1 log segments and log end offset 0 in 70 ms (kafka.log.Log)
[2017-09-14 15:22:28,802] INFO Created log for partition [mytopic,0] in /tmp/kafka-logs with properties {compression.type -> producer, message.format.version -> 0.10.2-IV0, file.delete.delay.ms -> 60000, max.message.bytes -> 1000012, min.compaction.lag.ms -> 0, message.timestamp.type -> CreateTime, min.insync.replicas -> 1, segment.jitter.ms -> 0, preallocate -> false, min.cleanable.dirty.ratio -> 0.5, index.interval.bytes -> 4096, unclean.leader.election.enable -> true, retention.bytes -> -1, delete.retention.ms -> 86400000, cleanup.policy -> [delete], flush.ms -> 9223372036854775807, segment.ms -> 604800000, segment.bytes -> 1073741824, retention.ms -> 604800000, message.timestamp.difference.max.ms -> 9223372036854775807, segment.index.bytes -> 10485760, flush.messages -> 9223372036854775807}. (kafka.log.LogManager)
[2017-09-14 15:22:28,804] INFO Partition [mytopic,0] on broker 0: No checkpointed highwatermark is found for partition mytopic-0 (kafka.cluster.Partition)
[2017-09-14 15:23:37,805] INFO [ReplicaFetcherManager on broker 0] Removed fetcher for partitions mytopic7-0,mytopic7-1 (kafka.server.ReplicaFetcherManager)
[2017-09-14 15:23:37,821] INFO Completed load of log mytopic7-0 with 1 log segments and log end offset 0 in 9 ms (kafka.log.Log)
[2017-09-14 15:23:37,827] INFO Created log for partition [mytopic7,0] in /tmp/kafka-logs with properties {compression.type -> producer, message.format.version -> 0.10.2-IV0, file.delete.delay.ms -> 60000, max.message.bytes -> 1000012, min.compaction.lag.ms -> 0, message.timestamp.type -> CreateTime, min.insync.replicas -> 1, segment.jitter.ms -> 0, preallocate -> false, min.cleanable.dirty.ratio -> 0.5, index.interval.bytes -> 4096, unclean.leader.election.enable -> true, retention.bytes -> -1, delete.retention.ms -> 86400000, cleanup.policy -> [delete], flush.ms -> 9223372036854775807, segment.ms -> 604800000, segment.bytes -> 1073741824, retention.ms -> 604800000, message.timestamp.difference.max.ms -> 9223372036854775807, segment.index.bytes -> 10485760, flush.messages -> 9223372036854775807}. (kafka.log.LogManager)
[2017-09-14 15:23:37,839] INFO Partition [mytopic7,0] on broker 0: No checkpointed highwatermark is found for partition mytopic7-0 (kafka.cluster.Partition)
[2017-09-14 15:23:37,852] INFO Completed load of log mytopic7-1 with 1 log segments and log end offset 0 in 2 ms (kafka.log.Log)
[2017-09-14 15:23:37,862] INFO Created log for partition [mytopic7,1] in /tmp/kafka-logs with properties {compression.type -> producer, message.format.version -> 0.10.2-IV0, file.delete.delay.ms -> 60000, max.message.bytes -> 1000012, min.compaction.lag.ms -> 0, message.timestamp.type -> CreateTime, min.insync.replicas -> 1, segment.jitter.ms -> 0, preallocate -> false, min.cleanable.dirty.ratio -> 0.5, index.interval.bytes -> 4096, unclean.leader.election.enable -> true, retention.bytes -> -1, delete.retention.ms -> 86400000, cleanup.policy -> [delete], flush.ms -> 9223372036854775807, segment.ms -> 604800000, segment.bytes -> 1073741824, retention.ms -> 604800000, message.timestamp.difference.max.ms -> 9223372036854775807, segment.index.bytes -> 10485760, flush.messages -> 9223372036854775807}. (kafka.log.LogManager)
[2017-09-14 15:23:37,863] INFO Partition [mytopic7,1] on broker 0: No checkpointed highwatermark is found for partition mytopic7-1 (kafka.cluster.Partition)
[2017-09-14 15:26:25,146] INFO [Group Metadata Manager on Broker 0]: Removed 0 expired offsets in 0 milliseconds. (kafka.coordinator.GroupMetadataManager)
[2017-09-14 15:36:25,146] INFO [Group Metadata Manager on Broker 0]: Removed 0 expired offsets in 0 milliseconds. (kafka.coordinator.GroupMetadataManager)
[2017-09-14 15:46:25,146] INFO [Group Metadata Manager on Broker 0]: Removed 0 expired offsets in 0 milliseconds. (kafka.coordinator.GroupMetadataManager)



-----------------------------------------------------------------------------------------------------------------------------------------


step 3: start topic(in one terminal)


lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic mytopic49
Created topic "mytopic".
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 2 --topic mytopic7
Created topic "mytopic7".
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-topics.sh --list --zookeeper localhost:2181 
mytopic
mytopic7



-----------------------------------------------------------------------------------------------------------------------------------------



step 4: start producer (in one terminal)

lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic mytopic49
hello
how are you?
bye
helloooooooooooooooooooooooooooooooooooooooooooooooooooo
haiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
enti sangathulu
-------------------------------------------------------------------------------------------------------------------------------------------

step 5: start consumer (in one terminal)


lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic mytopic49 --from-beginning
Using the ConsoleConsumer with old consumer is deprecated and will be removed in a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper].
hello
how are you?
bye
helloooooooooooooooooooooooooooooooooooooooooooooooooooo
haiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii

step 6: Killing Consumer:stop consumer (ctrl+c) and restart

Here no Probem to producer
^CProcessed a total of 5 messages
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic mytopic --from-beginning
Using the ConsoleConsumer with old consumer is deprecated and will be removed in a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper].
hello
how are you?
bye
helloooooooooooooooooooooooooooooooooooooooooooooooooooo
haiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
--------------------------------------------------------------------------------------------------------------------------------------
step 7: kill producer : stop producer(ctrl+c) and restart

^Clenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic mytopic
enti sangathulu?
msg1
msg2
msg3

observe in consumer

hello
how are you?
bye
helloooooooooooooooooooooooooooooooooooooooooooooooooooo
haiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
enti sangathulu?
msg1
msg2
msg3
---------------------------------------------------------------------------------------------------------------------------------------
step 8:kill server:stop server (broker) (ctrl+c)

producer/consumer will be running ---------->but they cannot read/write

^C[2017-09-14 15:57:41,562] INFO [Kafka Server 0], shutting down (kafka.server.KafkaServer)
[2017-09-14 15:57:41,564] INFO [Kafka Server 0], Starting controlled shutdown (kafka.server.KafkaServer)
[2017-09-14 15:57:41,670] INFO [Kafka Server 0], Controlled shutdown succeeded (kafka.server.KafkaServer)
[2017-09-14 15:57:41,675] INFO [Socket Server on Broker 0], Shutting down (kafka.network.SocketServer)
[2017-09-14 15:57:41,711] INFO [Socket Server on Broker 0], Shutdown completed (kafka.network.SocketServer)
[2017-09-14 15:57:41,713] INFO [Kafka Request Handler on Broker 0], shutting down (kafka.server.KafkaRequestHandlerPool)
[2017-09-14 15:57:41,719] INFO [Kafka Request Handler on Broker 0], shut down completely (kafka.server.KafkaRequestHandlerPool)
[2017-09-14 15:57:41,740] INFO [ThrottledRequestReaper-Fetch], Shutting down (kafka.server.ClientQuotaManager$ThrottledRequestReaper)
[2017-09-14 15:57:42,483] INFO [ThrottledRequestReaper-Fetch], Stopped  (kafka.server.ClientQuotaManager$ThrottledRequestReaper)
[2017-09-14 15:57:42,483] INFO [ThrottledRequestReaper-Fetch], Shutdown completed (kafka.server.ClientQuotaManager$ThrottledRequestReaper)
[2017-09-14 15:57:42,484] INFO [ThrottledRequestReaper-Produce], Shutting down (kafka.server.ClientQuotaManager$ThrottledRequestReaper)
[2017-09-14 15:57:43,483] INFO [ThrottledRequestReaper-Produce], Stopped  (kafka.server.ClientQuotaManager$ThrottledRequestReaper)
[2017-09-14 15:57:43,483] INFO [ThrottledRequestReaper-Produce], Shutdown completed (kafka.server.ClientQuotaManager$ThrottledRequestReaper)
[2017-09-14 15:57:43,484] INFO [KafkaApi-0] Shutdown complete. (kafka.server.KafkaApis)
[2017-09-14 15:57:43,487] INFO [Replica Manager on Broker 0]: Shutting down (kafka.server.ReplicaManager)
[2017-09-14 15:57:43,488] INFO [ReplicaFetcherManager on broker 0] shutting down (kafka.server.ReplicaFetcherManager)
[2017-09-14 15:57:43,493] INFO [ReplicaFetcherManager on broker 0] shutdown completed (kafka.server.ReplicaFetcherManager)
[2017-09-14 15:57:43,494] INFO [ExpirationReaper-0], Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:43,537] INFO [ExpirationReaper-0], Stopped  (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:43,537] INFO [ExpirationReaper-0], Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:43,538] INFO [ExpirationReaper-0], Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:43,690] INFO [ExpirationReaper-0], Stopped  (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:43,690] INFO [ExpirationReaper-0], Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:43,766] INFO [Replica Manager on Broker 0]: Shut down completely (kafka.server.ReplicaManager)
[2017-09-14 15:57:43,767] INFO [ExpirationReaper-0], Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:43,891] INFO [ExpirationReaper-0], Stopped  (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:43,891] INFO [ExpirationReaper-0], Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:43,896] INFO [GroupCoordinator 0]: Shutting down. (kafka.coordinator.GroupCoordinator)
[2017-09-14 15:57:43,897] INFO [ExpirationReaper-0], Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:44,091] INFO [ExpirationReaper-0], Stopped  (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:44,091] INFO [ExpirationReaper-0], Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:44,091] INFO [ExpirationReaper-0], Shutting down (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:44,291] INFO [ExpirationReaper-0], Stopped  (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:44,291] INFO [ExpirationReaper-0], Shutdown completed (kafka.server.DelayedOperationPurgatory$ExpiredOperationReaper)
[2017-09-14 15:57:44,292] INFO [GroupCoordinator 0]: Shutdown complete. (kafka.coordinator.GroupCoordinator)
[2017-09-14 15:57:44,294] INFO Shutting down. (kafka.log.LogManager)
[2017-09-14 15:57:44,416] INFO Shutdown complete. (kafka.log.LogManager)
[2017-09-14 15:57:44,428] INFO Terminate ZkClient event thread. (org.I0Itec.zkclient.ZkEventThread)
[2017-09-14 15:57:44,495] INFO Session: 0x15e7fb9002b0000 closed (org.apache.zookeeper.ZooKeeper)
[2017-09-14 15:57:44,499] INFO EventThread shut down for session: 0x15e7fb9002b0000 (org.apache.zookeeper.ClientCnxn)
[2017-09-14 15:57:44,501] INFO [Kafka Server 0], shut down completed (kafka.server.KafkaServer)
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ 

observe the producer

msg1
msg2
msg3

still running

observe the consumer

still running

[2017-09-14 15:59:09,361] WARN [console-consumer-55534_lenovo-Lenovo-G450-1505383752178-12290207-leader-finder-thread], Failed to find leader for Set(mytopic-0) (kafka.consumer.ConsumerFetcherManager$LeaderFinderThread)
kafka.common.KafkaException: fetching topic metadata for topics [Set(mytopic)] from broker [ArrayBuffer()] failed
	at kafka.client.ClientUtils$.fetchTopicMetadata(ClientUtils.scala:74)
	at kafka.client.ClientUtils$.fetchTopicMetadata(ClientUtils.scala:95)
	at kafka.consumer.ConsumerFetcherManager$LeaderFinderThread.doWork(ConsumerFetcherManager.scala:68)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)


still running

but cant read from topic, as broker is down , so no fault tolerance in the case of single broker Architecture..





